"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("./utils");
var _fs = require("fs");
var _path = require("path");
var _https = _interopRequireDefault(require("https"));
var _promises = _interopRequireDefault(require("fs/promises"));
var _compressing = _interopRequireDefault(require("compressing"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Note:
 * This is a modified fork of https://github.com/kevva/bin-wrapper
 * The module had a CVE-2021-3795 vulnerability and decided to fork
 * and "simplify" the implementation
 *
 * Original licence:
 *
 * MIT License
 * Copyright (c) Kevin MÃ¥rtensson <kevinmartensson@gmail.com>
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions
 * of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
// import SauceLabs from './';

class SauceConnectLoader {
  constructor(version) {
    this.destDir = (0, _path.join)(__dirname, 'sc-loader');
    this.destSC = (0, _path.join)(__dirname, 'sc-loader', `.sc-v${version}-${(0, _utils.getPlatform)()}-${(0, _utils.getCPUArch)()}`);
    let scBinary = 'sc';
    if ((0, _utils.isWindows)()) {
      scBinary += '.exe';
    }
    this.path = (0, _path.join)(this.destSC, scBinary);
  }

  /**
   * Verify if SC was already downloaded.
   * if not then download it
   *
   * @api public
   */
  verifyAlreadyDownloaded(options = {}) {
    return _promises.default.stat(this.path).catch(err => {
      if ((err === null || err === void 0 ? void 0 : err.code) === 'ENOENT') {
        if (options.url) {
          return this._download(options.url);
        }
        return false;
      }
      throw err;
    });
  }

  /**
   * Download Sauce Connect
   */
  _download(sauceConnectURL) {
    (0, _fs.mkdirSync)(this.destDir, {
      recursive: true
    });
    const compressedFilePath = (0, _path.join)(this.destDir, (0, _path.basename)(sauceConnectURL));
    return new Promise((resolve, reject) => {
      const file = (0, _fs.createWriteStream)(compressedFilePath);
      _https.default.get(sauceConnectURL, response => {
        response.pipe(file);
        file.on('finish', () => {
          file.close();
          resolve();
        });
      }).on('error', err => {
        (0, _fs.unlinkSync)(compressedFilePath);
        reject(err);
      });
    }).then(() => {
      if (compressedFilePath.endsWith('.tar.gz')) {
        return _compressing.default.tgz.uncompress(compressedFilePath, this.destSC).then(() => {
          // ensure the sc executable is actually executable
          return _promises.default.chmod(this.path, 0o755);
        });
      } else {
        return _compressing.default.zip.uncompress(compressedFilePath, this.destSC).then(() => {
          if (!(0, _utils.isWindows)()) {
            // ensure the sc executable is actually executable
            return _promises.default.chmod(this.path, 0o755);
          }
        });
      }
    });
  }
}
exports.default = SauceConnectLoader;