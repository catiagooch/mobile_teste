"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.describe = exports.command = exports.builder = void 0;
require("source-map-support/register");
var _ = _interopRequireDefault(require("./.."));
var _constants = require("../constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const command = exports.command = 'sc [flags]';
const describe = exports.describe = `Sauce Connect Proxy interface.
 - Only the 'sc run' command is currently supported
 - See https://docs.saucelabs.com/dev/cli/sauce-connect-5/run/ for detailed CLI documentation.
 - Sauce Connect Proxy 4.x.x cannot be used with the library version 9.0.0 and newer
 - Some Sauce Connect CLI option aliases differ from the 'sc' binary
 - Some CLI options differ from the 'sc' binary:
   - '--proxy' corresponds to https://docs.saucelabs.com/dev/cli/sauce-connect-5/run/#proxy-sauce
   - '--sc-upstream-proxy' corresponds to https://docs.saucelabs.com/dev/cli/sauce-connect-5/run/#proxy
`;
const builder = yargs => {
  for (const option of _constants.SAUCE_CONNECT_CLI_PARAMS) {
    yargs.option(option.name, option);
  }
};
exports.builder = builder;
const handler = async argv => {
  const {
    user,
    key,
    region,
    proxy
  } = Object.assign({}, _constants.DEFAULT_OPTIONS, argv);
  const api = new _.default({
    user,
    key,
    region,
    proxy
  });
  return api.startSauceConnect(argv, true);
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uc3RhbnRzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjb21tYW5kIiwiZXhwb3J0cyIsImRlc2NyaWJlIiwiYnVpbGRlciIsInlhcmdzIiwib3B0aW9uIiwiU0FVQ0VfQ09OTkVDVF9DTElfUEFSQU1TIiwibmFtZSIsImhhbmRsZXIiLCJhcmd2IiwidXNlciIsImtleSIsInJlZ2lvbiIsInByb3h5IiwiT2JqZWN0IiwiYXNzaWduIiwiREVGQVVMVF9PUFRJT05TIiwiYXBpIiwiU2F1Y2VMYWJzIiwic3RhcnRTYXVjZUNvbm5lY3QiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvc2MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNhdWNlTGFicyBmcm9tICcuLy4uJztcbmltcG9ydCB7REVGQVVMVF9PUFRJT05TLCBTQVVDRV9DT05ORUNUX0NMSV9QQVJBTVN9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBjb21tYW5kID0gJ3NjIFtmbGFnc10nO1xuZXhwb3J0IGNvbnN0IGRlc2NyaWJlID0gYFNhdWNlIENvbm5lY3QgUHJveHkgaW50ZXJmYWNlLlxuIC0gT25seSB0aGUgJ3NjIHJ1bicgY29tbWFuZCBpcyBjdXJyZW50bHkgc3VwcG9ydGVkXG4gLSBTZWUgaHR0cHM6Ly9kb2NzLnNhdWNlbGFicy5jb20vZGV2L2NsaS9zYXVjZS1jb25uZWN0LTUvcnVuLyBmb3IgZGV0YWlsZWQgQ0xJIGRvY3VtZW50YXRpb24uXG4gLSBTYXVjZSBDb25uZWN0IFByb3h5IDQueC54IGNhbm5vdCBiZSB1c2VkIHdpdGggdGhlIGxpYnJhcnkgdmVyc2lvbiA5LjAuMCBhbmQgbmV3ZXJcbiAtIFNvbWUgU2F1Y2UgQ29ubmVjdCBDTEkgb3B0aW9uIGFsaWFzZXMgZGlmZmVyIGZyb20gdGhlICdzYycgYmluYXJ5XG4gLSBTb21lIENMSSBvcHRpb25zIGRpZmZlciBmcm9tIHRoZSAnc2MnIGJpbmFyeTpcbiAgIC0gJy0tcHJveHknIGNvcnJlc3BvbmRzIHRvIGh0dHBzOi8vZG9jcy5zYXVjZWxhYnMuY29tL2Rldi9jbGkvc2F1Y2UtY29ubmVjdC01L3J1bi8jcHJveHktc2F1Y2VcbiAgIC0gJy0tc2MtdXBzdHJlYW0tcHJveHknIGNvcnJlc3BvbmRzIHRvIGh0dHBzOi8vZG9jcy5zYXVjZWxhYnMuY29tL2Rldi9jbGkvc2F1Y2UtY29ubmVjdC01L3J1bi8jcHJveHlcbmA7XG5leHBvcnQgY29uc3QgYnVpbGRlciA9ICh5YXJncykgPT4ge1xuICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBTQVVDRV9DT05ORUNUX0NMSV9QQVJBTVMpIHtcbiAgICB5YXJncy5vcHRpb24ob3B0aW9uLm5hbWUsIG9wdGlvbik7XG4gIH1cbn07XG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChhcmd2KSA9PiB7XG4gIGNvbnN0IHt1c2VyLCBrZXksIHJlZ2lvbiwgcHJveHl9ID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBhcmd2KTtcbiAgY29uc3QgYXBpID0gbmV3IFNhdWNlTGFicyh7dXNlciwga2V5LCByZWdpb24sIHByb3h5fSk7XG4gIHJldHVybiBhcGkuc3RhcnRTYXVjZUNvbm5lY3QoYXJndiwgdHJ1ZSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsQ0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBQXVFLFNBQUFELHVCQUFBRyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBRWhFLE1BQU1HLE9BQU8sR0FBQUMsT0FBQSxDQUFBRCxPQUFBLEdBQUcsWUFBWTtBQUM1QixNQUFNRSxRQUFRLEdBQUFELE9BQUEsQ0FBQUMsUUFBQSxHQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNLE1BQU1DLE9BQU8sR0FBSUMsS0FBSyxJQUFLO0VBQ2hDLEtBQUssTUFBTUMsTUFBTSxJQUFJQyxtQ0FBd0IsRUFBRTtJQUM3Q0YsS0FBSyxDQUFDQyxNQUFNLENBQUNBLE1BQU0sQ0FBQ0UsSUFBSSxFQUFFRixNQUFNLENBQUM7RUFDbkM7QUFDRixDQUFDO0FBQUNKLE9BQUEsQ0FBQUUsT0FBQSxHQUFBQSxPQUFBO0FBQ0ssTUFBTUssT0FBTyxHQUFHLE1BQU9DLElBQUksSUFBSztFQUNyQyxNQUFNO0lBQUNDLElBQUk7SUFBRUMsR0FBRztJQUFFQyxNQUFNO0lBQUVDO0VBQUssQ0FBQyxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUMsMEJBQWUsRUFBRVAsSUFBSSxDQUFDO0VBQzNFLE1BQU1RLEdBQUcsR0FBRyxJQUFJQyxTQUFTLENBQUM7SUFBQ1IsSUFBSTtJQUFFQyxHQUFHO0lBQUVDLE1BQU07SUFBRUM7RUFBSyxDQUFDLENBQUM7RUFDckQsT0FBT0ksR0FBRyxDQUFDRSxpQkFBaUIsQ0FBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQztBQUMxQyxDQUFDO0FBQUNSLE9BQUEsQ0FBQU8sT0FBQSxHQUFBQSxPQUFBIn0=